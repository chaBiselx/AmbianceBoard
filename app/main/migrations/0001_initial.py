# Generated by Django 5.1.6 on 2025-07-31 11:09

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import encrypted_model_fields.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DomainBlacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(db_index=True, max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Blacklisted Domain',
                'verbose_name_plural': 'Blacklisted Domains',
            },
        ),
        migrations.CreateModel(
            name='FailedLoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('username', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('attempts', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('alternativeName', models.CharField(blank=True, default=None, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('typePlaylist', models.CharField(choices=[('PLAYLIST_TYPE_INSTANT', 'Instant'), ('PLAYLIST_TYPE_AMBIENT', 'Ambient'), ('PLAYLIST_TYPE_MUSIC', 'Music')], max_length=64)),
                ('useSpecificColor', models.BooleanField(default=False)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('colorText', models.CharField(default='#ffffff', max_length=7)),
                ('volume', models.IntegerField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('icon', models.FileField(blank=True, default=None, null=True, upload_to='playlistIcon/')),
                ('useSpecificDelay', models.BooleanField(default=False)),
                ('maxDelay', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nom du tag (3-50 caractères)', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3)])),
                ('description', models.TextField(blank=True, help_text='Description optionnelle du tag', max_length=200)),
                ('is_active', models.BooleanField(default=True, help_text='Indique si le tag est actif et peut être utilisé')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('first_name', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text="Prénom de l'utilisateur", null=True)),
                ('last_name', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text="Nom de famille de l'utilisateur", null=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text="Nom d'utilisateur", max_length=64, unique=True, verbose_name='username')),
                ('isBan', models.BooleanField(default=False, help_text='Indicates if the user is banned')),
                ('isConfirmed', models.BooleanField(default=False, help_text="Indicates if the user's email is confirmed")),
                ('confirmationToken', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('demandeConfirmationDate', models.DateTimeField(blank=True, default=None, null=True)),
                ('reasonBan', models.CharField(blank=True, default='', max_length=255)),
                ('banExpiration', models.DateTimeField(blank=True, default=None, null=True)),
                ('tokenReinitialisation', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('demandeTokenDate', models.DateTimeField(blank=True, default=None, null=True)),
                ('betaTester', models.BooleanField(default=False, help_text='Indicates if the user is a beta tester')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='LinkMusic',
            fields=[
                ('track_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.track')),
                ('url', models.URLField()),
                ('domained_name', models.CharField(blank=True, max_length=255)),
                ('urlType', models.CharField(blank=True, choices=[('FILE', 'file'), ('STREAM', 'stream'), ('OTHER', 'other'), ('ERROR', 'error')], max_length=50)),
            ],
            bases=('main.track',),
        ),
        migrations.CreateModel(
            name='Music',
            fields=[
                ('track_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='main.track')),
                ('fileName', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='musics/')),
            ],
            bases=('main.track',),
        ),
        migrations.AddField(
            model_name='track',
            name='playlist',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracks', to='main.playlist'),
        ),
        migrations.AddField(
            model_name='playlist',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ReportContent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('typeElement', models.CharField(choices=[('playlist', 'playlist'), ('soundboard', 'soundboard')], max_length=25, verbose_name='Type de contenu')),
                ('uuidElement', models.UUIDField(db_index=True)),
                ('precisionElement', models.CharField(choices=[('unknown', 'unknown'), ('image', 'image'), ('text', 'text'), ('music', 'music'), ('copyright', 'copyright')], max_length=25, verbose_name="precision sur l'élément")),
                ('descriptionElement', models.TextField(verbose_name="Description de l'élément")),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('resultModerator', models.CharField(choices=[('INVALID', 'INVALID'), ('VALID', 'VALID'), ('SPAM', 'SPAM'), ('DUPLICATE', 'DUPLICATE'), ('OTHER', 'OTHER')], max_length=25, verbose_name='Resultat moderateur')),
                ('dateResultModerator', models.DateTimeField(blank=True, null=True, verbose_name='Date de la modération')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='moderated_reports', to=settings.AUTH_USER_MODEL, verbose_name='moderateur')),
            ],
        ),
        migrations.CreateModel(
            name='SoundBoard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('colorText', models.CharField(default='#ffffff', max_length=7)),
                ('is_public', models.BooleanField(default=False)),
                ('icon', models.FileField(blank=True, default=None, null=True, upload_to='soundBoardIcon/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SharedSoundboard',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('expiration_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('soundboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shared', to='main.soundboard')),
            ],
        ),
        migrations.CreateModel(
            name='SoundboardPlaylist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('Playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.playlist')),
                ('SoundBoard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.soundboard')),
            ],
        ),
        migrations.AddField(
            model_name='soundboard',
            name='playlists',
            field=models.ManyToManyField(related_name='soundboards', through='main.SoundboardPlaylist', to='main.playlist'),
        ),
        migrations.AddField(
            model_name='soundboard',
            name='tags',
            field=models.ManyToManyField(blank=True, help_text='Tags associés à ce soundboard', related_name='soundboards', to='main.tag'),
        ),
        migrations.CreateModel(
            name='UserFavoritePublicSoundboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to=settings.AUTH_USER_MODEL)),
                ('uuidSoundboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorite', to='main.soundboard')),
            ],
        ),
        migrations.CreateModel(
            name='UserModerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name="Message de l'avertissement")),
                ('tag', models.CharField(choices=[('LANGUAGE', 'LANGUAGE'), ('HARASSMENT', 'HARASSMENT'), ('INAPPROPRIATE_CONTENT', 'INAPPROPRIATE_CONTENT'), ('SPAM', 'SPAM'), ('COPYRIGHT', 'COPYRIGHT'), ('OTHER', 'OTHER')], max_length=50, verbose_name='Tag de modération')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de l'avertissement")),
                ('model', models.CharField(choices=[('UNKNOWN', 'UNKNOWN'), ('PLAYLIST', 'PLAYLIST'), ('SOUNDBOARD', 'SOUNDBOARD'), ('USER', 'USER')], default='unknown', max_length=50, verbose_name="Model de d'origine de l'avertissement")),
                ('moderator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserModerationLogModerator', to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='UserModerationLogReport', to='main.reportcontent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='UserModerationLogUser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(blank=True, choices=[('dark', 'DARK'), ('light', 'LIGHT')], default='light', max_length=50, verbose_name='Theme')),
                ('playlistDim', models.IntegerField(blank=True, default=100, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('soundboardDim', models.IntegerField(blank=True, default=100, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='UserPreference', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserTier',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tier_name', models.CharField(choices=[('STANDARD', 'Standard'), ('PREMIUM_BASIC', 'Premium Basic'), ('PREMIUM_ADVANCED', 'Premium Advanced'), ('PREMIUM_PRO', 'Premium Pro')], default='STANDARD', help_text="Tier actuel de l'utilisateur", max_length=50)),
                ('tier_start_date', models.DateTimeField(auto_now_add=True, help_text='Date de début du tier actuel')),
                ('tier_expiry_date', models.DateTimeField(blank=True, help_text="Date d'expiration du tier (pour les abonnements premium)", null=True)),
                ('auto_renew', models.BooleanField(default=False, help_text="Renouvellement automatique de l'abonnement")),
                ('payment_reference', encrypted_model_fields.fields.EncryptedCharField(blank=True, help_text='Référence de paiement ou ID de transaction')),
                ('notes', models.TextField(blank=True, help_text="Notes administratives sur le tier de l'utilisateur")),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tier_info', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tier Utilisateur',
                'verbose_name_plural': 'Tiers Utilisateurs',
                'ordering': ['-tier_start_date'],
            },
        ),
        migrations.CreateModel(
            name='PlaylistColorUser',
            fields=[
                ('id', models.AutoField(auto_created=True, editable=False, primary_key=True, serialize=False)),
                ('typePlaylist', models.CharField(choices=[('PLAYLIST_TYPE_INSTANT', 'Son instantanné'), ('PLAYLIST_TYPE_AMBIENT', "Son d'ambiance"), ('PLAYLIST_TYPE_MUSIC', 'Musique')], max_length=64)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('colorText', models.CharField(default='#ffffff', max_length=7)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'typePlaylist')},
            },
        ),
        migrations.CreateModel(
            name='UserTierHistory',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('previous_tier', models.CharField(help_text='Tier précédent', max_length=50)),
                ('new_tier', models.CharField(help_text='Nouveau tier', max_length=50)),
                ('change_reason', models.CharField(choices=[('UPGRADE', 'Upgrade payant'), ('DOWNGRADE', 'Downgrade/Expiration'), ('ADMIN_CHANGE', 'Modification administrative'), ('MIGRATION', 'Migration système'), ('PROMO', 'Promotion/Offre spéciale')], help_text='Raison du changement de tier', max_length=255)),
                ('payment_reference', models.CharField(blank=True, help_text='Référence de paiement associée', max_length=255)),
                ('payment_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Montant payé pour ce changement', max_digits=10, null=True)),
                ('tier_duration_days', models.PositiveIntegerField(blank=True, help_text='Durée du tier en jours', null=True)),
                ('tier_start_date', models.DateTimeField(help_text='Date de début du nouveau tier')),
                ('tier_end_date', models.DateTimeField(blank=True, help_text='Date de fin prévue du tier', null=True)),
                ('notes', models.TextField(blank=True, help_text='Notes sur ce changement de tier')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Adresse IP lors du changement', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent lors du changement')),
                ('changed_by', models.ForeignKey(blank=True, help_text='Utilisateur ayant effectué le changement (admin/système)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tier_changes_made', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tier_history', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique Tier Utilisateur',
                'verbose_name_plural': 'Historiques Tiers Utilisateurs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='main_userti_user_id_0babe1_idx'), models.Index(fields=['change_reason'], name='main_userti_change__97e09f_idx'), models.Index(fields=['created_at'], name='main_userti_created_7079e0_idx')],
            },
        ),
    ]
