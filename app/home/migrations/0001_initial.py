# Generated by Django 5.1.6 on 2025-02-28 15:52

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FailedLoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('username', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('attempts', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('isBan', models.BooleanField(default=False)),
                ('isConfirmed', models.BooleanField(default=False)),
                ('confirmationToken', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('demandeConfirmationDate', models.DateTimeField(blank=True, default=None, null=True)),
                ('reasonBan', models.CharField(default='', max_length=255)),
                ('banExpiration', models.DateTimeField(blank=True, default=None, null=True)),
                ('tokenReinitialisation', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('demandeTokenDate', models.DateTimeField(blank=True, default=None, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('typePlaylist', models.CharField(choices=[('PLAYLIST_TYPE_INSTANT', 'Son instantanné'), ('PLAYLIST_TYPE_AMBIENT', "Son d'ambiance"), ('PLAYLIST_TYPE_MUSIC', 'Musique')], max_length=64)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('colorText', models.CharField(default='#ffffff', max_length=7)),
                ('volume', models.IntegerField(default=75, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('icon', models.FileField(blank=True, default=None, null=True, upload_to='playlistIcon/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Music',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fileName', models.CharField(max_length=63)),
                ('alternativeName', models.CharField(default=None, max_length=63)),
                ('file', models.FileField(upload_to='musics/')),
                ('playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.playlist')),
            ],
        ),
        migrations.CreateModel(
            name='SoundBoard',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('colorText', models.CharField(default='#ffffff', max_length=7)),
                ('is_public', models.BooleanField(default=False)),
                ('icon', models.FileField(blank=True, default=None, null=True, upload_to='soundBoardIcon/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Soundboard_Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=0)),
                ('Playlist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.playlist')),
                ('SoundBoard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.soundboard')),
            ],
        ),
        migrations.AddField(
            model_name='soundboard',
            name='playlists',
            field=models.ManyToManyField(related_name='soundboards', through='home.Soundboard_Playlist', to='home.playlist'),
        ),
        migrations.CreateModel(
            name='UserModerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(verbose_name="Message de l'avertissement")),
                ('tag', models.CharField(choices=[('LANGUAGE', 'LANGUAGE'), ('HARASSMENT', 'HARASSMENT'), ('INAPPROPRIATE_CONTENT', 'INAPPROPRIATE_CONTENT'), ('SPAM', 'SPAM'), ('COPYRIGHT', 'COPYRIGHT'), ('OTHER', 'OTHER')], max_length=50, verbose_name='Tag de modération')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de l'avertissement")),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
