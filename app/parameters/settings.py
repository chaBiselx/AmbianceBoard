"""
Django settings for parameters project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY")
FIELD_ENCRYPTION_KEY = os.environ.get("FIELD_ENCRYPTION_KEY")

DEBUG = bool(int(os.environ.get("DEBUG", default=0)))
ACTIVE_SSL = bool(int(os.environ.get("ACTIVE_SSL", default=1)))
DEBUG_TOOLBAR = bool(int(os.environ.get("DEBUG_TOOLBAR", default=0)))
if(DEBUG ==0):
    DEBUG_TOOLBAR = False
    
RUN_CRONS = bool(int(os.environ.get("RUN_CRONS", default=0)))
    
    
TESTING = 'test' in sys.argv

if ACTIVE_SSL:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

EMAIL_DEBUG = bool(os.environ.get("EMAIL_DEBUG", default=None))
EMAIL_SMTP_SERVEUR = str(os.environ.get("EMAIL_SMTP_SERVEUR"))
EMAIL_SMTP_PORT = int(os.environ.get("EMAIL_SMTP_PORT"))
EMAIL_SMTP_USERNAME = str(os.environ.get("EMAIL_SMTP_USERNAME"))
EMAIL_SMTP_PASSWORD = str(os.environ.get("EMAIL_SMTP_PASSWORD"))
EMAIL_SMTP_USE_TLS = bool(os.environ.get("EMAIL_SMTP_USE_TLS", default=True))

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
APP_HOST = os.getenv('WEB_HOST')
APP_PORT = int(os.getenv('WEB_PORT'))
APP_SCHEME  = 'https' if ACTIVE_SSL else 'http'

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", default="localhost 127.0.0.1 [::1]").split(" ")

CSRF_TRUSTED_ORIGINS = []

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "home",
    "django_crontab",
]



# Logging configuration
if not os.path.exists(os.path.join(BASE_DIR, 'logs')):
    os.mkdir(os.path.join(BASE_DIR, 'logs'), mode=0o777 if DEBUG else 0o666)
    
level_log_debug = 'DEBUG' if DEBUG else 'WARNING'
timed_rotating_file_handler = 'logging.handlers.TimedRotatingFileHandler'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} {message} file:{filename} line:{lineno}',
            'style': '{',
        },
        'console': {
            'format': '{asctime} {levelname} {message}',
            'style': '{',
        },
        'request': {
            'format': '{asctime} {method:<8} {request} {post} {status} {duration}sec id:{unique_id}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
        'ORM_file': {
            'level': level_log_debug,
            'class': timed_rotating_file_handler,
            'filename': os.path.join(BASE_DIR, 'logs', 'orm_logs.log'),
            'when': 'D',  # Daily rotation
            'interval': 1,  # Every day
            'backupCount': 7,  # Keep 7 days of logs
            'formatter': 'verbose',
        },
        'APP_file': {
            'level': 'INFO',
            'class': timed_rotating_file_handler,
            'filename': os.path.join(BASE_DIR, 'logs', 'app_logs.log'),
            'when': 'D',  # Daily rotation
            'interval': 1,  # Every day
            'backupCount': 7,  # Keep 7 days of logs
            'formatter': 'verbose',
        },
        'request_file': {
            'level': 'INFO',
            'class': timed_rotating_file_handler,
            'filename': os.path.join(BASE_DIR, 'logs', 'request_logs.log'),
            'when': 'D',  # Daily rotation
            'interval': 1,  # Every day
            'backupCount': 7,  # Keep 7 days of logs
            'formatter': 'request',
        },
        'Mail_file': {
            'level': 'INFO',
            'class': timed_rotating_file_handler,
            'filename': os.path.join(BASE_DIR, 'logs', 'mails_logs.log'),
            'when': 'D',  # Daily rotation
            'interval': 1,  # Every day
            'backupCount': 14,  # Keep 14 days of logs
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': [],
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['ORM_file'],
            'level': 'DEBUG' ,
            'propagate': False,
        },
        'home': {
            'handlers': ['console', 'APP_file'],
            'level': level_log_debug,
            'propagate': False,
        },
        'mail': {
            'handlers': ['APP_file', 'Mail_file'],
            'level': level_log_debug,
            'propagate': False,
        },
        'request': {
            'handlers': ['request_file'],
            'level': level_log_debug,
            'propagate': False,
        },
    },
}



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "home.middleware.LogRequestsMiddleware.LogRequestsMiddleware",
]

ROOT_URLCONF = "parameters.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'defaultTemplate')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'home.context_processors.sidebar_processor.sidebar_processor',
                'home.context_processors.user_preference_processor.user_preference_processor',
            ],
        },
    },
]

WSGI_APPLICATION = "parameters.wsgi.application"

# Websocket

ASGI_APPLICATION = 'parameters.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

AUTH_USER_MODEL = 'home.User'
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS  = [BASE_DIR / 'static']

LOGIN_URL = '/login'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = [] 
DEBUG_TOOLBAR_CONFIG = []

# debug toolbar
if(DEBUG_TOOLBAR):
    INSTALLED_APPS.append('debug_toolbar')
    MIDDLEWARE.append('debug_toolbar.middleware.DebugToolbarMiddleware')
    
    INTERNAL_IPS.append('127.0.0.1')
    if APP_PORT : 
        INTERNAL_IPS.append(APP_HOST + ':' + str(APP_PORT))
    else :
        INTERNAL_IPS.append(APP_HOST)
        
    DEBUG_TOOLBAR_CONFIG = {
        'SHOW_TOOLBAR_CALLBACK': lambda request: True,
    }

 
     
    
#Message system 
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# CRON JOBS
CRON_CLASSES = []
CRONJOBS = []
if RUN_CRONS:
    CRON_CLASSES.append('home.cron.CleanMediaFolderCron.run')
    CRON_CLASSES.append('home.cron.DeleteAccountCron.run')
    CRON_CLASSES.append('home.cron.DeleteSharedSoundboardExpiredCron.run')
    CRON_CLASSES.append('home.cron.UserTierExpirationCron.run')
    
    CRONJOBS.append(('0 10 * * *', 'home.cron.CleanMediaFolderCron.run'))
    CRONJOBS.append(('0 10 * * *', 'home.cron.DeleteAccountCron.run'))
    CRONJOBS.append(('0 18 * * *', 'home.cron.DeleteSharedSoundboardExpiredCron.run'))
    CRONJOBS.append(('0 6 * * *', 'home.cron.UserTierExpirationCron.run'))  # Tous les jours Ã  6h
        

# message brokers 
RABBIT_MQ_HOST = os.environ.get("RABBIT_MQ_HOST")
RABBIT_MQ_PORT = os.environ.get("RABBIT_MQ_PORT_AMQP")
RABBIT_MQ_USER = os.environ.get("RABBIT_MQ_USER")
RABBIT_MQ_PASSWORD = os.environ.get("RABBIT_MQ_PASSWORD")

CELERY_BROKER_URL = f"amqp://{RABBIT_MQ_USER}:{RABBIT_MQ_PASSWORD}@{RABBIT_MQ_HOST}:{RABBIT_MQ_PORT}/"  # URL de RabbitMQ 
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

MEDIA_AUDIO_MESSENGER_NB_MAX_FILE = 100
MEDIA_IMG_MESSENGER_NB_MAX_FILE = 100

# auth 
from home.enum.GroupEnum import GroupEnum

GROUPS = {group.name: group.value for group in GroupEnum}

from home.enum.PermissionEnum import PermissionEnum

PERMISSIONS = {permission.name: permission.value for permission in PermissionEnum}

ATTRIB_PERMISSIONS = {
    GroupEnum.ADMIN.name: {
        "inherited_permissions": [GroupEnum.MANAGER.name, GroupEnum.MODERATEUR.name , GroupEnum.USER_STANDARD.name],
        "permission" : []
    },
    GroupEnum.MANAGER.name: {
        "inherited_permissions": [GroupEnum.MODERATEUR.name , GroupEnum.USER_STANDARD.name],
        "permission" : [
            PermissionEnum.MANAGER_ATTRIBUTE_MODERATEUR_ROLE.name,
            PermissionEnum.MANAGER_ACCESS_DASHBOARD.name,
            PermissionEnum.MANAGER_EXECUTE_BATCHS.name
        ]
    },
    GroupEnum.MODERATEUR.name: {
        "inherited_permissions": [GroupEnum.USER_STANDARD.name],
        "permission" : [
            PermissionEnum.MODERATEUR_ACCESS_ALL_MUSIC.name, 
            PermissionEnum.MODERATEUR_ACCESS_ALL_PLAYLIST.name, 
            PermissionEnum.MODERATEUR_ACCESS_ALL_SOUNDBOARD.name,
            PermissionEnum.MODERATEUR_ACCESS_DASHBOARD.name
        ]
    },
    GroupEnum.USER_STANDARD.name: {
        "inherited_permissions": [],
        "permission" : [PermissionEnum.USER_STANDARD.name]
    },
}

# USER TIERS AND LIMITS CONFIGURATION
# Configuration flexible pour diffÃ©rents niveaux d'utilisateurs

USER_TIERS = {
    'STANDARD': {
        'name': 'Standard',
        'display_name': 'Utilisateur Standard',
        'limits': {
            'soundboard': 5,
            'playlist': 75,
            'music_per_playlist': 5,
            'weight_music_mb': 50,
        },
        'group_enum': 'USER_STANDARD'
    },
    'PREMIUM_BASIC': {
        'name': 'Premium Basic',
        'display_name': 'Premium Basique',
        'limits': {
            'soundboard': 25,
            'playlist': 150,
            'music_per_playlist': 10,
            'weight_music_mb': 70,
        },
        'group_enum': 'USER_PREMIUM_BASIC'
    },
    # PrÃªt pour de futures versions premium
    'PREMIUM_ADVANCED': {
        'name': 'Premium advanced',
        'display_name': 'Premium AvancÃ©e',
        'limits': {
            'soundboard': 50,
            'playlist': 250,
            'music_per_playlist': 20,
            'weight_music_mb': 150,
        },
        'group_enum': 'USER_PREMIUM_ADVANCED'  # Ã ajouter dans GroupEnum
    },
    'PREMIUM_PRO': {
        'name': 'Premium Professionnel',
        'display_name': 'Premium Professionnel',
        'limits': {
            'soundboard': 100,
            'playlist': 500,
            'music_per_playlist': 30,
            'weight_music_mb': 200,
        },
        'group_enum': 'USER_PREMIUM_PRO'  # Ã ajouter dans GroupEnum
    }
}






# CACHE

LIMIT_CACHE_DEFAULT = 14400 # 4h