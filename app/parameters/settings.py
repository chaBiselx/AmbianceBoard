"""
Django settings for parameters project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get("SECRET_KEY")

DEBUG = bool(os.environ.get("DEBUG", default=0))

EMAIL_DEBUG = bool(os.environ.get("EMAIL_DEBUG", default=None))
EMAIL_SMTP_SERVEUR = str(os.environ.get("EMAIL_SMTP_SERVEUR"))
EMAIL_SMTP_PORT = int(os.environ.get("EMAIL_SMTP_PORT"))
EMAIL_SMTP_USERNAME = str(os.environ.get("EMAIL_SMTP_USERNAME"))
EMAIL_SMTP_PASSWORD = str(os.environ.get("EMAIL_SMTP_PASSWORD"))
EMAIL_SMTP_USE_TLS = bool(os.environ.get("EMAIL_SMTP_USE_TLS", default=True))

# 'DJANGO_ALLOWED_HOSTS' should be a single string of hosts with a space between each.
# For example: 'DJANGO_ALLOWED_HOSTS=localhost 127.0.0.1 [::1]'
ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", default="localhost 127.0.0.1 [::1]").split(" ")

CSRF_TRUSTED_ORIGINS = ["http://localhost:1337"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    "home",
    "django_crontab",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "parameters.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'defaultTemplate')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "parameters.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}

AUTH_USER_MODEL = 'home.User'
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS  = [BASE_DIR / 'static']

LOGIN_URL = '/login'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "mediafiles"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#loggin 
if DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
      
        },
        'loggers': {
            'home': {
                'handlers': ['console'],
                'level': 'DEBUG',
            },
            'cron': {
                'level': 'DEBUG',
            },
        },
    }
    
#Message system 
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# CRON JOBS
CRON_CLASSES  = [
   "home.cron.CleanMediaFolderCron.run",
]

CRONJOBS = [
    ('* 2 * * *', 'home.cron.CleanMediaFolderCron.run'), # evey minute
]

# message brokers 
RABBIT_MQ_HOST = os.environ.get("RABBIT_MQ_HOST")
RABBIT_MQ_PORT = os.environ.get("RABBIT_MQ_PORT_AMQP")
RABBIT_MQ_USER = os.environ.get("RABBIT_MQ_USER")
RABBIT_MQ_PASSWORD = os.environ.get("RABBIT_MQ_PASSWORD")

CELERY_BROKER_URL = f"amqp://{RABBIT_MQ_USER}:{RABBIT_MQ_PASSWORD}@{RABBIT_MQ_HOST}:{RABBIT_MQ_PORT}/"  # URL de RabbitMQ 
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

MEDIA_AUDIO_MESSENGER_NB_MAX_FILE = 100
MEDIA_IMG_MESSENGER_NB_MAX_FILE = 100

# auth 
from home.enum.GroupEnum import GroupEnum

GROUPS = {group.name: group.value for group in GroupEnum}

from home.enum.PermissionEnum import PermissionEnum

PERMISSIONS = {permission.name: permission.value for permission in PermissionEnum}

ATTRIB_PERMISSIONS = {
    GroupEnum.ADMIN.name: {
        "inherited_permissions": [GroupEnum.MANAGER.name, GroupEnum.MODERATEUR.name , GroupEnum.USER_PREMIUM.name, GroupEnum.USER_STANDARD.name],
        "permission" : []
    },
    GroupEnum.MANAGER.name: {
        "inherited_permissions": [GroupEnum.MODERATEUR.name , GroupEnum.USER_PREMIUM.name, GroupEnum.USER_STANDARD.name],
        "permission" : [
            PermissionEnum.MANAGER_ATTRIBUTE_MODERATEUR_ROLE.name,
            PermissionEnum.MANAGER_ACCESS_DASHBOARD.name,
            PermissionEnum.MANAGER_EXECUTE_BATCHS.name
        ]
    },
    GroupEnum.MODERATEUR.name: {
        "inherited_permissions": [GroupEnum.USER_PREMIUM.name, GroupEnum.USER_STANDARD.name],
        "permission" : [
            PermissionEnum.MODERATEUR_ACCESS_ALL_MUSIC.name, 
            PermissionEnum.MODERATEUR_ACCESS_ALL_PLAYLIST.name, 
            PermissionEnum.MODERATEUR_ACCESS_ALL_SOUNDBOARD.name,
            PermissionEnum.MODERATEUR_ACCESS_DASHBOARD.name
        ]
    },
    GroupEnum.USER_PREMIUM.name: {
        "inherited_permissions": [GroupEnum.USER_STANDARD.name],
        "permission" : [
            PermissionEnum.USER_PREMIUM_OVER_LIMIT_SOUNDBOARD.name,
            PermissionEnum.USER_PREMIUM_OVER_LIMIT_PLAYLIST.name,
            PermissionEnum.USER_PREMIUM_OVER_LIMIT_WEIGHT_MUSIC.name,
            PermissionEnum.USER_PREMIUM_OVER_LIMIT_MUSIC_PER_PLAYLIST.name,
            ]
    },
    GroupEnum.USER_STANDARD.name: {
        "inherited_permissions": [],
        "permission" : [PermissionEnum.USER_STANDARD.name]
    },
}

#LIMIT
LIMIT_USER_PREMIUM_SOUNDBOARD = 25
LIMIT_USER_PREMIUM_PLAYLIST = 1000
LIMIT_USER_PREMIUM_MUSIC_PER_PLAYLIST = 25
LIMIT_USER_PREMIUM_WEIGHT_MUSIC = 120 #Mo
# LIMIT USER STANDARD
LIMIT_USER_STANDARD_SOUNDBOARD = 5
LIMIT_USER_STANDARD_PLAYLIST = 75
LIMIT_USER_STANDARD_MUSIC_PER_PLAYLIST = 10
LIMIT_USER_STANDARD_WEIGHT_MUSIC = 50 #Mo