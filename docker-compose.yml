services:
  cronjob:
    build: ./app
    command: cron -f
    volumes:
      - ./app/:/usr/src/app/
    env_file:
      - ./.env
    environment:
      - RUNCRON=1
    depends_on:
      - db
      - rabbitmq  # Ajout de la dépendance à RabbitMQ

  back:
    build: ./app
    command: python manage.py runserver 0.0.0.0:${WEB_PORT}
    volumes:
      - ./app/:/usr/src/app/
      - static_volume:/usr/src/app/static/
    ports:
      - ${WEB_PORT}:${WEB_PORT}
    env_file:
      - ./.env
    environment:
      - RUNCRON=0
    depends_on:
      - db
      - rabbitmq  # Ajout de la dépendance à RabbitMQ

  front:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - static_volume:/app/static/
    ports:
      - "3000:3000"
    command: npm run dev
    environment:
      - DEBUG=${DEBUG}
    depends_on:
      - back

  db:
    image: postgres:15.8
    ports:
      - $SQL_PORT:$SQL_PORT
    environment:
      - POSTGRES_USER=${SQL_USER} # user et mot de passe pour le super user postgres
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    volumes:
       - ./db-data/:/var/lib/postgresql/data/

  rabbitmq:
    image: rabbitmq:3-management  # Version avec interface de gestion
    ports:
      - ${RABBIT_MQ_PORT_AMQP}:${RABBIT_MQ_PORT_AMQP}    # Port pour AMQP
      - ${RABBIT_MQ_PORT_WEB}:${RABBIT_MQ_PORT_WEB}  # Port pour l'interface web de gestion
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_MQ_USER}     # Utilisateur par défaut
      - RABBITMQ_DEFAULT_PASS=${RABBIT_MQ_PASSWORD}      # Mot de passe par défaut
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq # Persistance des données

  smtp:
    image: mailhog/mailhog
    ports:
      - "${EMAIL_SMTP_PORT}:${EMAIL_SMTP_PORT}"  # Port SMTP pour envoyer les emails
      - "8025:8025"  # Interface web de MailHog pour visualiser les emails

volumes:
  db-data: null
  rabbitmq-data: null 
  static_volume: null
